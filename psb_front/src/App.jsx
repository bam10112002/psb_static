import React, { useEffect, useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";

const BASE_URL = "https://176-123-166-115.nip.io/api/requests";

const App = () => {
  const [ogrn, setOgrn] = useState("");
  const [appNumber, setAppNumber] = useState("");
  const [requests, setRequests] = useState([]);
  const [editId, setEditId] = useState(null);
  const [error, setError] = useState(null);

  const tg = window.Telegram?.WebApp;

  useEffect(() => {
    tg?.ready();
    fetchRequests();
  }, []);

  const fetchRequests = async () => {
    try {
      if (!tg) {
        setError("Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      
      // –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º userId
      tg.ready();
  
      const user = 1;
      if (!user) {
        setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Telegram");
        return;
      }
  
      const userId = user.id;
      console.log("User ID:", userId);
  
      const res = await fetch(`${BASE_URL}?userId=${userId}`);
      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫: ${res.status}`);
      }
      const data = await res.json();
      setRequests(data);
      setError(null);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫", e);
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    const userId = 1
    if (!userId) {
      setError("UserId –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let payload;
    if (editId) {
      // PUT –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ, —Ç–æ–ª—å–∫–æ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      payload = {};
      if (ogrn.trim()) payload.ogrn = ogrn.trim();
      if (appNumber.trim()) payload.appNumber = appNumber.trim();
      if (Object.keys(payload).length === 0) {
        setError("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        return;
      }
    } else {
      // POST ‚Äî –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!ogrn.trim() || !appNumber.trim()) {
        setError("–û–ì–†–ù –∏ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
        return;
      }
      payload = { ogrn: ogrn.trim(), appNumber: appNumber.trim(), userId };
    }

    const url = editId ? `${BASE_URL}/${editId}` : BASE_URL;
    const method = editId ? "PUT" : "POST";

    try {
      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${res.status} ${errorText}`);
      }

      const result = await res.json();

      setOgrn("");
      setAppNumber("");
      setEditId(null);
      fetchRequests();
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏", e);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏");
    }
  };

  const handleEdit = (req) => {
    setEditId(req.id);
    setOgrn(req.ogrn);
    setAppNumber(req.appNumber);
    window.scrollTo({ top: 0, behavior: "smooth" });
    setError(null);
  };

  const handleDelete = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?")) return;
    try {
      const res = await fetch(`${BASE_URL}/${id}`, { method: "DELETE" });
      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${res.status}`);
      }
      fetchRequests();
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", e);
      setError("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏");
    }
  };

  return (
    <div className="container mt-4">
      <h2 className="mb-3">{editId ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏" : "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"}</h2>

      {error && (
        <div className="alert alert-danger" role="alert">
          {error}
        </div>
      )}

      <div className="card mb-4">
        <div className="card-body">
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">–û–ì–†–ù</label>
              <input
                type="text"
                className="form-control"
                value={ogrn}
                onChange={(e) => setOgrn(e.target.value)}
                required={!editId}
              />
            </div>
            <div className="mb-3">
              <label className="form-label">–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏</label>
              <input
                type="text"
                className="form-control"
                value={appNumber}
                onChange={(e) => setAppNumber(e.target.value)}
                required={!editId}
              />
            </div>
            <button className="btn btn-primary" type="submit">
              {editId ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"}
            </button>
            {editId && (
              <button
                type="button"
                className="btn btn-secondary ms-2"
                onClick={() => {
                  setEditId(null);
                  setOgrn("");
                  setAppNumber("");
                  setError(null);
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            )}
          </form>
        </div>
      </div>

      <h3>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</h3>
      <ul className="list-group">
        {requests.length === 0 && <li className="list-group-item">–ó–∞—è–≤–æ–∫ –Ω–µ—Ç</li>}
        {requests.map((req) => (
          <li
            key={req.id}
            className="list-group-item d-flex justify-content-between align-items-center"
          >
            <div>
              <strong>–û–ì–†–ù:</strong> {req.ogrn}
              <br />
              <strong>–ù–æ–º–µ—Ä:</strong> {req.appNumber}
            </div>
            <div>
              <button
                className="btn btn-sm btn-outline-secondary me-2"
                onClick={() => handleEdit(req)}
              >
                ‚úèÔ∏è
              </button>
              <button
                className="btn btn-sm btn-outline-danger"
                onClick={() => handleDelete(req.id)}
              >
                üóëÔ∏è
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;
